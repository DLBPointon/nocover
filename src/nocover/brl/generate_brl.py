import datetime

from xml.etree import ElementTree
from xml.etree.ElementTree import Element, SubElement, Comment, indent

def generate_brl_file(
    book_list: list[dict[str, str]],
    series_data: dict[str, str],
    universe: str,
    universe_position: str,
    save_location: str,
    add_tags: bool,
):
    output_brl(
        add_tags, universe, universe_position, book_list, series_data, save_location
    )


def book_maker(books, data, tags: bool):
    """
    Build the XML subtree for each book in series.
    """
    book = SubElement(
        books,
        "Book",
        {
            "Name": data.book_name,
            "Year": data.release_year,
            "Publisher": data.book_publisher,
            "ISBN13": data.book_isbn13,
            "Position": str(data.series_position),
        },
    )

    book_db = SubElement(
        book,
        "Database",
        {
            "Name": "Hardcover",
            "Item": data.book_slug
        }
    )

    if tags:
        for i in data.book_tags:
            tag = SubElement(book, "Tag")
            tag.text = i

    return book, book_db


def output_brl(
    tags, universe, universe_position, book_data, series_data, save_location
):
    """
    Build the XML tree for the Series
    """
    generated_on = str(datetime.datetime.now())

    root = Element("opml")
    root.set("version", "1.0")
    root.append(Comment(f"Generated by nocover (by DLBPointon) on {generated_on}"))

    root2 = SubElement(root, "ReadingList")


    series = SubElement(
                    root2, "Series",
                    {
                        "Name": series_data["name"],
                    },
                )

    if universe:
        # Universe Data
        SubElement(
            series, "Universe",
            {
                "Name": universe,
                "Position": universe_position
            },
        )

    # Series Data
    SubElement(
        series, "Database",
        {
            "Name": "Hardcover",
            "Item": series_data.get("series_slug", series_data["slug"])
        },
    )

    series_descrption = SubElement(series, "Description",)
    series_descrption.text = series_data.get("series_description", series_data["description"])

    numbooks = SubElement(root2, "NumBooks")
    numbooks.text = str(len(book_data))

    books = SubElement(root2, "Books")

    # Make elements for each book
    [book_maker(books, i, tags) for i in book_data]

    # Set the indents for each element
    indent(root, space="  ", level=0)

    root_tree = ElementTree.ElementTree(root)

    # This is effectively to touch file for writing
    with open(save_location, mode="w") as tmp: # noqa: F841
        pass

    root_tree.write(save_location, encoding="utf-8", xml_declaration=True)
